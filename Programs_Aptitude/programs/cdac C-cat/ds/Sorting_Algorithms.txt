// insertion sort function
void insertion_sort(int arr[], int n)
{
	int i, j;
	int temp;
	for(i=1; i<n; i++)
	{
		temp = arr[i];
		for(j=i-1; j>=0 && arr[j] > temp; j--)
			arr[j+1] = arr[j];
		arr[j+1] = temp;
	}
}		

// Merge sort function
void merge_sort(int a[], int left, int right)
{
	int cnt=right-left+1, mid=(left+right)/2; 
	int i=left, j=mid+1, k=0;
	int *tmp;

	if(left>=right)
		return;
	merge_sort(a, left, mid);
	merge_sort(a, mid+1, right);
	tmp = (int*)malloc(cnt*sizeof(int));
	
	while(i<=mid && j<=right)
	{
		tmp[k++] = a[i] < a[j] ? a[i++] : a[j++];
	}

	while(i<=mid)
	{
		tmp[k++] = a[i++];
	}

	while(j<=right)
	{
		tmp[k++] = a[j++];
	}

	memcpy(a+left, tmp, cnt*sizeof(int));
	free(tmp);

}//end of merge_sort function


// bubble sort function
void bubble_sort(int arr[], int n)
{
	int i, j;
	for (i = 0; i < n - 1; i++)
	{
		for (j = 0; j < n - 1 - i; j++)
		{
			if (arr[j] > arr[j+1])
				SWAP(arr[j], arr[j+1], int);
		}
	}
}

